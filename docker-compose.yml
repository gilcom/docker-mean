# specify docker-compose version
version: '3' 

# Define the services/containers to be run
services:
  angular: # name of the first service
    build: ./angular-client # specify the directory of the Dockerfile
    volumes:
      - "/media/jose/C2A47601A475F86D/proyectos/mean-docker/angular-client:/usr/src/app"
    ports:
      - "4200:4200" # specify port forewarding
      - "49153:49153" #Watching for changes

  database: # name of the third service
    image: mongo # specify image to build container from
    ports:
      - "27017:27017" # specify port forewarding
    volumes:
      - ~/data/mongo:/data/db # "~/data/mongo" needs to be created on host to store MongoDB data

  node:
      build:
        context: ./express-server
        args:
          - NODE_ENV=development
      # you can use legacy debug config or new inspect
      # NOTE: if nodemon isn't restarting on changes, you might be on Windows
      # which has trouble seeing file changes, so add -L to use legacy polling
      # https://github.com/remy/nodemon#application-isnt-restarting
      #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
      command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229
      ports:
        - "80:80"
        - "5858:5858"
        - "9229:9229"
      volumes:
        - .:/opt/app
        # this is a workaround to prevent host node_modules from accidently getting mounted in container
        # in case you want to use node/npm both outside container for test/lint etc. and also inside container
        # this will overwrite the default node_modules dir in container so it won't conflict with our
        # /opt/node_modules location. Thanks to PR from @brnluiz
        - notused:/opt/app/node_modules
      environment:
        - NODE_ENV=development

volumes:
    notused: